---
# Initial manual preparation (not needed with a c9s cloud image on PSI):
# - Create user, add to group wheel: useradd -m -G wheel stack
# - Set password for new user: passwd stack
# - Let users of wheel group use sudo without password: visudo
# - Copy local ssh key to remote machine: ssh-copy-id stack@<host>
- name: Upgrade all packages
  ansible.builtin.dnf:
    name: "*"
    nobest: True
    state: latest
  become: yes
  when: ansible_os_family == 'RedHat'
  tags: install

- name: Install required packages
  ansible.builtin.package:
    name:
      - ansible-core
      - gcc
      - git-core
      - make
      - podman
      - python3
      - python3-pip
    state: latest
  become: yes
  tags: install

- name: Install some extra packages
  ansible.builtin.package:
    name:
      - bash-completion
      - delve
      - tmux
      - vim
    state: latest
  become: yes
  tags: install

- name: Pip install openstack client packages as user
  ansible.builtin.pip:
    name:
      - python-openstackclient
      - python-octaviaclient
    extra_args: --user
  tags: install

- name: Clone operators using Git
  ansible.builtin.git: "{{ item }}"
  with_items: "{{ operators_git_repos }}"
  tags: git

- name: Create ~/pull-secret.txt
  template:
    src: pull-secret.txt.j2
    dest: "~/pull-secret.txt"
  tags: [crc, pre-config]

- name: Ensure ~/.config/openstack directory exists
  ansible.builtin.file:
    path: ~/.config/openstack
    state: directory
    mode: '0755'
  tags: [crc, pre-config]

- name: Set up ~/.config/openstack/clouds.yaml
  copy:
    src: clouds.yaml
    dest: ~/.config/openstack/clouds.yaml
  tags: [crc, pre-config]

- name: Create devsetup using make (may take 30 minutes or more)
  make:
    target: crc
    params:
      CPUS: "{{ make_crc_cpus }}"
      MEMORY: "{{ make_crc_memory }}"
      DISK: "{{ make_crc_disk }}"
    chdir: "~/install_yamls/devsetup"
  tags: crc

- name: Run make download_tools
  make:
    target: download_tools
    chdir: "~/install_yamls/devsetup"
  tags: crc

- name: Create symbolic link for kubectl
  file:
    src: ~/.crc/bin/oc/oc
    dest: ~/.crc/bin/oc/kubectl
    state: link
  tags: crc

- name: Create devsetup using make
  shell:
    cmd: |
      set +ex
      eval $(crc oc-env)
      oc login -u kubeadmin -p 12345678 https://api.crc.testing:6443
      make crc_storage
      make input
    chdir: "~/install_yamls"
  tags: crc

- name: Run make crc_attach_default_interface
  shell:
    cmd: |
      set +ex
      eval $(crc oc-env)
      oc login -u kubeadmin -p 12345678 https://api.crc.testing:6443
      make crc_attach_default_interface
      exit 0
    chdir: "~/install_yamls/devsetup"
  tags: crc

- name: Deploy openstack operators
  shell:
    cmd: |
      set +ex
      eval $(crc oc-env)
      oc login -u kubeadmin -p 12345678 https://api.crc.testing:6443
      oc project openstack-operators
      for i in mariadb keystone ovn neutron rabbitmq ; do
        make $i || break ; sleep 60 ; make ${i}_deploy || break
      done
      make infra
      make memcached_deploy
      sleep 300
      oc completion bash | sudo tee /etc/bash_completion.d/oc_completion
      openstack complete | sudo tee /etc/bash_completion.d/osc.bash_completion
      exit 0
    #creates: "/etc/bash_completion.d/oc_completion"
    chdir: "~/install_yamls"
  tags: crc

- name: Export OS_CLOUD and OS_PASSWORD in .bashrc
  lineinfile:
    path: ~/.bashrc
    line: "{{ item }}"
  with_items:
    - export PATH=$PATH:~/.crc/bin/oc
    - export OS_CLOUD=default
    - export OS_PASSWORD=12345678
  tags: config

- name: Copy ~/.tmux.conf
  copy:
    src: ~/.tmux.conf
    dest: ~/.tmux.conf
    force: no
  ignore_errors: true
  tags: config

- name: Copy ~/.vscode jsons
  copy:
    src: "{{ item }}"
    dest: ~/.vscode/
    force: no
  with_items:
    - launch.json
    - tasks.json
  tags: config

- name: Copy VSCode workspace config
  copy:
    src: stack.code-workspace
    dest: ~/
    force: no
  tags: config

- name: Increase max_user_watches for VSCode
  become: yes
  lineinfile:
    path: /etc/sysctl.conf
    line: fs.inotify.max_user_watches=524288
  notify: "Apply sysctl"
  tags: config

- name: Add exports to .bashrc
  lineinfile:
    path: ~/.bashrc
    line: "{{ item }}"
  with_items:
    - export OS_CLOUD=default
    - export OS_PASSWORD=12345678
    - export EDPM_COMPUTE_CEPH_ENABLED=false
    - export BMO_SETUP=false
    - export PATH=$PATH:~/.crc/bin/oc
  tags: config

- name: Copy PodSet CR with containerImage fields set
  copy:
    src: octavia_v1beta1_octavia.yaml
    dest: ~/octavia_v1beta1_octavia.yaml
    force: no
  tags: config

# Now run the operator as a Go program locally (outside the Kubernetes cluster):
#
# Either using VSCode or directly in a shell:
# In VSCode open the home folder and add the ~/octavia_operator folder to the
# workspace (File->Add folder to workspace...). Then open
# ~/octavia_operator/main.go and press F5 to start the debugger
# In shell:
# cd ~/octavia-operator; ENABLE_WEBHOOKS=false GOWORK= OPERATOR_TEMPLATES=./templates make install run
#
# Deploy your PodSet Custom Resource to the live OpenShift Cluster:
# oc create -f ~/octavia_v1beta1_octavia.yaml
# watch octavia pods get created using `oc get pods -w`
